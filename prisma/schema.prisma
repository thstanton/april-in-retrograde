// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Keyword {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  title     String     @unique
  linkItems LinkItem[] @relation(fields: [linkIds], references: [id])
  linkIds   String[]   @db.ObjectId
  boards    Board[]    @relation(fields: [boardIds], references: [id])
  boardIds  String[]   @db.ObjectId
}

model LinkItem {
  id                String         @id @default(auto()) @map("_id") @db.ObjectId
  URL               String
  description       String
  imageURL          String
  imageAltText      String
  site              String
  title             String
  price             Int?
  keywordIds        String[]       @db.ObjectId
  keywords          Keyword[]      @relation(fields: [keywordIds], references: [id])
  categoryId        String         @db.ObjectId
  category          Category       @relation(fields: [categoryId], references: [id])
  boardIds          String[]       @db.ObjectId
  boards            BoardSection[] @relation(fields: [boardIds], references: [id])
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  usersThatSaved    User[]         @relation("LinkItem_Users_saved", fields: [usersThatSavedIds], references: [id])
  usersThatSavedIds String[]       @db.ObjectId
  ownerId           String         @db.ObjectId
  owner             User           @relation("LinkItem_User_owner", fields: [ownerId], references: [id])
  userId            String?        @db.ObjectId
}

model Board {
  id                String         @id @default(auto()) @map("_id") @db.ObjectId
  description       String
  title             String
  author            User           @relation("Board_User_owner", fields: [authorId], references: [id])
  authorId          String         @db.ObjectId
  keywords          Keyword[]      @relation(fields: [keywordIds], references: [id])
  keywordIds        String[]       @db.ObjectId
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  usersThatSaved    User[]         @relation("Board_User_saved", fields: [usersThatSavedIds], references: [id])
  usersThatSavedIds String[]       @db.ObjectId
  BoardSection      BoardSection[]
}

model BoardSection {
  id        String              @id @default(auto()) @map("_id") @db.ObjectId
  boardId   String              @db.ObjectId
  board     Board               @relation(fields: [boardId], references: [id])
  title     String
  body      String
  images    BoardSectionImage[]
  linkIds   String[]            @db.ObjectId
  linkItems LinkItem[]          @relation(fields: [linkIds], references: [id])
}

model BoardSectionImage {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  boardSectionId String       @db.ObjectId
  boardSection   BoardSection @relation(fields: [boardSectionId], references: [id])
  URL            String
  altText        String
}

model User {
  id               String     @id @default(auto()) @map("_id") @db.ObjectId
  name             String?
  email            String?    @unique
  emailVerified    DateTime?
  image            String?
  savedLinkItemIds String[]   @db.ObjectId
  savedLinkItems   LinkItem[] @relation("LinkItem_Users_saved", fields: [savedLinkItemIds], references: [id])
  ownedLinkItemIds String[]   @db.ObjectId
  ownedLinkItems   LinkItem[] @relation("LinkItem_User_owner")
  ownedBoards      Board[]    @relation("Board_User_owner")
  savedBoardIds    String[]   @db.ObjectId
  savedBoards      Board[]    @relation("Board_User_saved", fields: [savedBoardIds], references: [id])
  accounts         Account[]
  profile          Profile?
  Session          Session[]
}

model Category {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  title     String     @unique
  linkItems LinkItem[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Profile {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @unique @db.ObjectId
  bio    String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
