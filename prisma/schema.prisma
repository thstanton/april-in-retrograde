// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Keyword {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  title   String
  links   Link[]   @relation(fields: [linkIds], references: [id])
  linkIds String[] @db.ObjectId
  posts   Post[]   @relation(fields: [postIds], references: [id])
  postIds String[] @db.ObjectId
}

model Link {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  URL              String
  author           String
  description      String
  imageURL         String
  site             String
  title            String
  price            Int?
  keywordIds       String[]           @db.ObjectId
  keywords         Keyword[]          @relation(fields: [keywordIds], references: [id])
  category         Category           @relation(fields: [categoryId], references: [id])
  categoryId       String             @db.ObjectId
  PostCategoryLink PostCategoryLink[]
}

model Post {
  id          String             @id @default(auto()) @map("_id") @db.ObjectId
  description String
  title       String
  author      User               @relation(fields: [authorId], references: [id])
  authorId    String             @db.ObjectId
  links       PostCategoryLink[]
  keywords    Keyword[]          @relation(fields: [keywordIds], references: [id])
  keywordIds  String[]           @db.ObjectId
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  posts         Post[]
  accounts      Account[]
  profile       Profile?
}

model Category {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  title            String
  links            Link[]
  PostCategoryLink PostCategoryLink[]
}

model PostCategoryLink {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  post       Post     @relation(fields: [postId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])
  link       Link     @relation(fields: [linkId], references: [id])
  order      Int
  postId     String   @db.ObjectId
  categoryId String   @db.ObjectId
  linkId     String   @db.ObjectId
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Profile {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId @unique
  bio    String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}
